import dotenv from "dotenv";
import { ConfigEnv, Plugin, PreviewServerForHook, ViteDevServer, defineConfig } from "vite";
import { viteStaticCopy } from "vite-plugin-static-copy";
import { VitePWA, VitePWAOptions } from "vite-plugin-pwa";
import manifest from "./manifest_icons_template.json";

dotenv.config();

interface VitePluginScanditOptions {
  licenseKey: string;
  licenseKeyPlaceholder: string;
}

function scandit(options: VitePluginScanditOptions): Plugin {
  let config: ConfigEnv;

  function setupServer(server: ViteDevServer | PreviewServerForHook): void {
    server.config.preview.port = 8888;
    server.config.server.port = 8888;
    server.middlewares.use((_req, res, next) => {
      res.setHeader("Cross-Origin-Embedder-Policy", "require-corp");
      res.setHeader("Cross-Origin-Opener-Policy", "same-origin");
      next();
    });
  }

  return {
    name: "vite-plugin-scandit",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    transform(code) {
      const shouldReplaceLicenseKey = config.command === "serve" || !process.env.SKIP_LICENSE_KEY_REPLACEMENT;
      if (shouldReplaceLicenseKey) {
        return {
          code: code.replace(options.licenseKeyPlaceholder, options.licenseKey),
        };
      }
    },
    transformIndexHtml(html) {
      return html.replace(
        '<script type="module" crossorigin src="./index.js"></script>',
        '<script data-id="scandit-main" type="module" crossorigin src="./index.js"></script>'
      );
    },
    configureServer: setupServer,
    configurePreviewServer: setupServer,
  };
}

const createPwaOptions = ({ mode }): Partial<VitePWAOptions> => {
  return {
    mode: mode,
    devOptions: {
      enabled: mode !== "production",
    },
    workbox: {
      globPatterns: ["**/*.{css,html,ico,png,svg}", "**/*.{wasm,js}"],
      maximumFileSizeToCacheInBytes: 6.5 * 1024 * 1024, // up to 6mb because of wasm files
      ignoreURLParametersMatching: [/^v/], // without this the wasm file are not matched in the cache
      runtimeCaching: [{
        urlPattern: ({url}) => url.origin === "https://*.scandit.com/*.js",
        handler: "CacheFirst",
        options: {
          cacheName: "scandit.com",
          expiration: {
            // Adjust the number of entries to keep as needed.
            maxEntries: 2,
          },
        }
      }],
    },
    manifest: {
      name: "BarcodeCaptureSimplePWASample",
      short_name: "Barcode PWA",
      description:
        "Enterprise barcode scanning performance in your browser via JavaScript and WebAssembly. Use cameras and let users easily scan barcodes in your web app.",
      theme_color: "#000000",
      // generated by update-pwa-assets script
      icons: manifest.icons,
    },
    registerType: "autoUpdate",
  };
};

export default defineConfig(({ mode }) => {
  return {
    base: "./",
    build: {
      emptyOutDir: true,
      rollupOptions: {
        output: {
          assetFileNames: "[name].[ext]",
          chunkFileNames: "[name].[ext]",
          entryFileNames: "[name].js",
        },
      },
    },
    envPrefix: "SCANDIT",
    plugins: [
      VitePWA(createPwaOptions({ mode })),
      viteStaticCopy({
        targets: ["core", "barcode"]
          .map((module) => ({
            src: `./node_modules/@scandit/web-datacapture-${module}/sdc-lib/*`,
            dest: "./library/engine",
          }))
          .concat([{ src: "./assets/pwa/*", dest: "./pwa" }]),
      }),
      scandit({
        licenseKey: process.env.SCANDIT_LICENSE_KEY ?? "",
        licenseKeyPlaceholder: "-- ENTER YOUR SCANDIT LICENSE KEY HERE --",
      }),
    ],
  };
});
